var documenterSearchIndex = {"docs":
[{"location":"Sympnet/#SympNet-Documentation","page":"SympNet Documentation","title":"SympNet Documentation","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Here is the documentation about the SympNets architecture that the package GeometricMachineLearning.jl offers. ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Quick overview of the theory of SympNet\nPrinciple\nArchitecture of SympNets\nUniversal approximation theorems\nSympNet with GeometricMachineLearning.jl","category":"page"},{"location":"Sympnet/#Quick-overview-of-the-theory-of-SympNet-a-name\"Quick*overview*of*the*theory*of*SympNet\"/a","page":"SympNet Documentation","title":"Quick overview of the theory of SympNet <a name=\"QuickoverviewofthetheoryofSympNet\"></a>","text":"","category":"section"},{"location":"Sympnet/#Principle-a-name\"Principle\"/a","page":"SympNet Documentation","title":"Principle <a name=\"Principle\"></a>","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"SympNets is a new type of neural network proposing a new approach to compute the trajectory of an Hamiltonian system in phase space. Let us denote by (qp)=(q_1q_dp_1p_d)in mathbbR^2d the phase space with qin mathbbR^d the gereralized position and  pin mathbbR^d the generalized momentum. Given a physical problem, SympNets takes a phase space element (qp) and aims to compute the next position (qp) of the trajectory in phase space a time step later while preserving the well known symplectic structure of Hamiltonian systems. The way SympNet preserve the symplectic structure is really specific and characterizes it as this preseving is intrinsic of the neural network. Indeed, SympNet is not made with traditional layers but with symplectic layers (decribe later) modifyng the traditional universal approximation theorem into a symplectic one : SympNet is able to approach any symplectic function providing conditions on an activation function.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"SympNet (noted Phi in the following) is so an integrator from mathbbR^d times mathbbR^d to mathbbR^d times mathbbR^d preserving symplecticity wich can compute, from an initial condition (q_0p_0), a sequence of phase space elements of a trajectory (q_np_n)=Phi(q_n-1p_n-1)==Phi^n(q_0p_0). The time step between predictions is not a parameter we can choose but is related to the temporal frequency of the training data. SympNet can handle both  temporally regular data, i.e with a fix time step between data, and temporally irregular data, i.e with variable time step. ","category":"page"},{"location":"Sympnet/#Architecture-of-SympNets-a-name\"Architecture\"/a","page":"SympNet Documentation","title":"Architecture of SympNets <a name=\"Architecture\"></a>","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"With GeometricMachineLearning.jl, it is possible to implement two types of architecture which are LA-SympNet and G-SympNet. ","category":"page"},{"location":"Sympnet/#LA-SympNet","page":"SympNet Documentation","title":"LA-SympNet","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"LA-SympNets are made of the alternation of two types of layers, sy (Image: )mplectic linear layers and symplectic activation layers.  For a given integer n, a symplectic linear layer is defined by","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"mathcalL^nup  beginpmatrix  q      p  endpmatrix =     beginpmatrix   IS^n0     0S^nI  endpmatrix cdots    beginpmatrix   I0     S^2I  endpmatrix    beginpmatrix   IS^1     0I  endpmatrix  beginpmatrix  q      p  endpmatrix + b","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"or ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"mathcalL^nlow  beginpmatrix  q      p  endpmatrix =     beginpmatrix   I0S^n     S^n0I  endpmatrix cdots    beginpmatrix   IS^2     0I  endpmatrix  beginpmatrix   I0     S^1I  endpmatrix  beginpmatrix  q      p  endpmatrix + b","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The parameters to learn are the symmetric matrices S^iinmathbbR^dtimes d and the bias binmathbbR^2d. The integer n is the width of the symplectic linear layer. If ngeq9, we know that the symplectic linear layers represent any linear symplectic map so that n need not be larger than 9. We note the set of symplectic linear layers mathcalM^L. This type of layers plays the role of standard linear layers. ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"For a given activation function sigma, a symplectic activation layer is defined by","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"mathcalA^up  beginpmatrix  q      p  endpmatrix =     beginbmatrix   Ihatsigma^a     0I  endbmatrix beginpmatrix  q      p  endpmatrix =  beginpmatrix    mathrmdiag(a)sigma(p)+q     p  endpmatrix","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"or","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"mathcalA^low  beginpmatrix  q      p  endpmatrix =     beginbmatrix   I0     hatsigma^aI  endbmatrix beginpmatrix  q      p  endpmatrix  =  beginpmatrix   q    mathrmdiag(a)sigma(q)+p  endpmatrix","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The parameters to learn are the weights ainmathbbR^d. This type of layers plays the role of standard activation layers layers. We note the set of symplectic activation layers mathcalM^A. ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"A LA-SympNet is a function of the form Psi=l_k+1 circ a_k circ v_k circ cdots circ a_1 circ l_1 where (l_i)_1leq ileq k+1 subset (mathcalM^L)^k+1 and  ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"(a_i)_1leq ileq k subset (mathcalM^A)^k.","category":"page"},{"location":"Sympnet/#G-SympNet","page":"SympNet Documentation","title":"G-SympNet","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"G-SympNets are an alternative to LA-SympNet. They are constituated with only one kind of layers called gradient layers. For a given activation function sigma and an interger ngeq d, a gradient layers is a symplectic map from mathbbR^2d to mathbbR^2d defined by","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"mathcalG^up  beginpmatrix  q      p  endpmatrix =     beginbmatrix   Ihatsigma^Kab     0I  endbmatrix beginpmatrix  q      p  endpmatrix =  beginpmatrix    K^T mathrmdiag(a)sigma(Kp+b)+q     p  endpmatrix","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"or","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"mathcalG^low  beginpmatrix  q      p  endpmatrix =     beginbmatrix   I0     hatsigma^KabI  endbmatrix beginpmatrix  q      p  endpmatrix  =  beginpmatrix   q    K^T mathrmdiag(a)sigma(Kq+b)+p  endpmatrix","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The parameters of this layer are the scale matrix KinmathbbR^ntimes d, the bias binmathbbR^n and the vector of weights ainmathbbR^n. The idea is that hatsigma^Kab can approximate any function of the form nabla V, hence the name of this layer. The integer n is called the width of the gradient layer.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"If we note by mathcalM^G the set of gradient layers, a G-SympNet is a function of the form Psi=g_k circ g_k-1 circ cdots circ g_1 where (g_i)_1leq ileq k subset (mathcalM^G)^k.","category":"page"},{"location":"Sympnet/#Universal-approximation-theorems-a-name\"Theorems\"/a","page":"SympNet Documentation","title":"Universal approximation theorems <a name=\"Theorems\"></a>","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"We give now properly the universal approximation for both architectures. But let us give few definitions before. ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Let U be an open set of mathbbR^2d, and let us note by SP^r(U) the set of C^r smooth symplectic maps on U. Let us give a topology on the  set of C^r smooth maps from a compacta K of mathbbR^n to mathbbR^n for any positive intergers n through the norm","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"f_C^r(KmathbbR^n) = undersetalphaleq rsum underset1leq i leq nmaxundersetxin Ksup D^alpha f_i(x)","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"where the differential operator D^alpha is defined for any map of C^r(mathbbR^nmathbbR) by  D^alpha f = fracpartial^alpha fpartial x_1^alpha_1x_n^alpha_n with alpha = alpha_1 ++ alpha_n. ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Definition Let sigma a real map and rin mathbbN. sigma is r-finite if sigmain C^r(mathbbRmathbbR) and int D^rsigma(x)dx +infty.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Definition Let mnrin mathbbN with mn0 be given, U an open set of mathbbR^m, and IJsubset C^r(UmathbbR^n. We say J is r-uniformly dense on compacta in I if J subset I and for any fin I, epsilon0, and any compacta Ksubset U, there exists gin J such that f-g_C^r(KmathbbR^n)  epsilon.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"We can now gives the theorems.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Theorem (Approximation theorem for LA-SympNet) For any positive interger r0 and open set Uin mathbbR^2d, the set of LA-SympNet is r-uniformly dense on compacta in SP^r(U) if the activation function sigma is r-finite.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Theorem (Approximation theorem for G-SympNet) For any positive interger r0 and open set Uin mathbbR^2d, the set of G-SympNet is r-uniformly dense on compacta in SP^r(U) if the activation function sigma is r-finite.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"These two theorems are at odds with the well-foundedness of the SympNets. ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Example of r-finite functions","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"sigmoid sigma(x)=frac11+e^-x for any positve interger r, \ntanh tanh(x)=frace^x-e^-xe^x+e^-x for any positve interger r. ","category":"page"},{"location":"Sympnet/#SympNet-with-GeometricMachineLearning.jl-a-id\"SympNet*with*GeometricMachineLearning\"/a","page":"SympNet Documentation","title":"SympNet with GeometricMachineLearning.jl <a id=\"SympNetwithGeometricMachineLearning\"></a>","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"With GeometricMachineLearning.jl, it is really easy to implement and train a SympNet. The steps are the following :","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Create the architecture in one line with the function GSympNet or LASympNet,\nCreate the neural networks depending a backend (e.g. with Lux),\nCreate an optimizer for the training step,\nTrain the neural networks with the train!function.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Both LA-SympNet and G-SympNet architectures can be generated in one line with GeometricMachineLearning.jl.","category":"page"},{"location":"Sympnet/#LA-SympNet-2","page":"SympNet Documentation","title":"LA-SympNet","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"To create a LA-SympNet, one needs to write","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"lasympnet = LASympNet(dim; width=9, nhidden=1, activation=tanh, init_uplow_linear=[true,false], \n            init_uplow_act=[true,false],init_sym_matrices=Lux.glorot_uniform, init_bias=Lux.zeros32, \n            init_weight=Lux.glorot_uniform) ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"LASympNet takes one obligatory argument:","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"dim : the dimensiom of the phase space,","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"and severals keywords argument :","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"width : the width for all the symplectic linear layers with default value set to 9 (if width>9, width is set to 9),\nnhidden : the number of pairs of symplectic linear and activation layers with default value set to 0 (i.e LA-SympNet is a single symplectic linear layer),\nactivation : the activation function for all the symplectic activations layers with default value set to tanh,\ninituplowlinear : a vector of boolean whose the ith coordinate is true only if all the symplectic linear layers in (i mod length(init_uplow_linear))-th position is up (for example the default value is [true,false] which represents an alternation of up and low symplectic linear layers),\ninituplowact : a vector of boolean whose the ith coordinate is true only if all the symplectic activation layers in (i mod length(init_uplow_act))-th position is up (for example the default value is [true,false] which represents an alternation of up and low symplectic activation layers),\ninitsymmatrices: the function which gives the way to initialize the symmetric matrices S^i of symplectic linear layers,\ninit_bias: the function which gives the way to initialize the vector of bias b,\ninit_weight: the function which gives the way to initialize the weight a.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The default value of the last three keyword arguments uses Lux functions.","category":"page"},{"location":"Sympnet/#G-SympNet-2","page":"SympNet Documentation","title":"G-SympNet","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"To create a G-SympNet, one needs to write","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"gsympnet = GSympNet(dim; width=dim, nhidden=1, activation=tanh, init_uplow=[true,false], init_weight=Lux.glorot_uniform, \ninit_bias=Lux.zeros32, init_scale=Lux.glorot_uniform) ","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"GSympNet takes one obligatory argument:","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"dim : the dimensiom of the phase space,","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"and severals keywords argument :","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"width : the width for all the gradients layers with default value set to dim to have widthgeqdim,\nnhidden : the number of gradient layers with default value set to 1,\nactivation : the activation function for all the gradients layers with default value set to tanh,\ninit_uplow: a vector of boolean whose the ith coordinate is true only if all the gradient layers in (i mod length(init_uplow))-th position is up (for example the default value is [true,false] which represents an alternation of up and low gradient layers),\ninit_weight: the function which gives the way to initialize the vector of weights a,\ninit_bias: the function which gives the way to initialize the vector of bias b,\ninit_scale: the function which gives the way to initialize the scale matrix K.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The default value of the last three keyword arguments uses Lux functions.","category":"page"},{"location":"Sympnet/#Loss-function","page":"SympNet Documentation","title":"Loss function","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"To train the SympNet, one need data along a trajectory such that the model is trained to perform an integration. These datas are (QP) where Qij (respectively Pij) is the real number q_j(t_i) (respectively pij) which is the j-th cordinates of the generalized position (respicitvely momentum) at the i-th time step. One also need a loss function defined as :","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Loss(QP) = undersetisum d(Phi(Qi-Pi-) Qi- Pi-^T)","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"where d is a distance on mathbbR^d.","category":"page"},{"location":"Sympnet/#Examples","page":"SympNet Documentation","title":"Examples","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Let us see how to use it on severals examples.","category":"page"},{"location":"Sympnet/#Example-of-a-pendulum-with-G-SympNet","page":"SympNet Documentation","title":"Example of a pendulum with G-SympNet","text":"","category":"section"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Let us begin with an esay example, the pendulum system, the Hamiltonian of which is H(qp)inmathbbR^2 mapsto frac12p^2-cos(q) in mathbbR","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The first thing to do is to create an architecture, in this example a G-SympNet.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"# number of inputs/dimension of system\nconst ninput = 2\n# layer dimension for gradient module \nconst ld = 10 \n# hidden layers\nconst ln = 4\n# activation function\nconst act = tanh\n\n# Creation of a G-SympNet architecture \ngsympnet = GSympNet(ninput, width=ld, nhidden=ln, activation=act)\n\n# Creation of a LA-SympNet architecture \nlasympnet = LASympNet(ninput, nhidden=ln, activation=act)","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Then we can create the neraul networks depending on the backend. Here we will use Lux :","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"# create Lux network\nnn = NeuralNetwork(gsympnet, LuxBackend())","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"We have to define an optimizer wich will be use in the training of the SympNet. For more details on optimizer, please see the corresponding documentation Optimizer.md. For exemple, let us use a momentum optimizer :","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"# Optimiser\nopt = MomentumOptimizer(1e-2, 0.5)","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"We can now perform the training of the neural networks. The syntax is the following :","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"# number of training runs\nconst nruns = 10000\n# Batchsize used to compute the gradient of the loss function with respect to the parameters of the neural networks.\nconst nbatch = 10\n\n# perform training (returns array that contains the total loss for each training step)\ntotal_loss = train!(nn, opt, data_q, data_p; ntraining = nruns, batch_size = nbatch)","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The train function will change the parameters of the neural networks and gives an a vector containing the evolution of the value of the loss function during the training. Default values for the arguments ntraining and batch_size are respectively 1000 and 10.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"The trainings data data_q and data_p must be matrices of mathbbR^ntimes d where n is the lenght of data and d is the half of the dimension of the system, i.e data_q[i,j] is q_j(t_i) where (t_1t_n) are the corresponding time of the training data.","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"Then we can make prediction. Let's compare the initial datas with a prediction starting from the same phase space point using the provided function Iterate_Sympnet:","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"#predictions\nq_learned, p_learned = Iterate_Sympnet(nn, q0, p0; n_points = size(data_q,1))","category":"page"},{"location":"Sympnet/","page":"SympNet Documentation","title":"SympNet Documentation","text":"(Image: )","category":"page"},{"location":"library/","page":"Library","title":"Library","text":"CurrentModule = GeometricMachineLearning","category":"page"},{"location":"library/#GeometricMachineLearning-Library-Functions","page":"Library","title":"GeometricMachineLearning Library Functions","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [GeometricMachineLearning]","category":"page"},{"location":"library/#GeometricMachineLearning.default_retr","page":"Library","title":"GeometricMachineLearning.default_retr","text":"The architecture for a \"transformer encoder\" is essentially taken from arXiv:2010.11929, but with the difference that 𝐧𝐨 layer normalization is employed.     This is because we still need to find a generalization of layer normalization to manifolds. \n\n\n\n\n\n","category":"constant"},{"location":"library/#GeometricMachineLearning.BlockIdentityLowerMatrix","page":"Library","title":"GeometricMachineLearning.BlockIdentityLowerMatrix","text":"A BlockIdentityLowerMatrix is a matrix with blocks | 1  0 | | S  1 | Currently, it only implements a custom mul! method, exploiting this structure.\n\n\n\n\n\n","category":"type"},{"location":"library/#GeometricMachineLearning.BlockIdentityUpperMatrix","page":"Library","title":"GeometricMachineLearning.BlockIdentityUpperMatrix","text":"A BlockIdentityUpperMatrix is a matrix with blocks | 1  S | | 0  1 | Currently, it only implements a custom mul! method, exploiting this structure.\n\n\n\n\n\n","category":"type"},{"location":"library/#GeometricMachineLearning.GradientOptimizer","page":"Library","title":"GeometricMachineLearning.GradientOptimizer","text":"Define the Gradient optimizer, i.e. W ← W - η*∇f(W) Or the riemannian manifold equivalent, if applicable.\n\n\n\n\n\n","category":"type"},{"location":"library/#GeometricMachineLearning.GrassmannManifold","page":"Library","title":"GeometricMachineLearning.GrassmannManifold","text":"maybe consider dividing the output in the check functions by n! TODO: Implement sampling procedures!!\n\n\n\n\n\n","category":"type"},{"location":"library/#GeometricMachineLearning.MomentumOptimizer","page":"Library","title":"GeometricMachineLearning.MomentumOptimizer","text":"Define the Momentum optimizer, i.e.  V ← αV - ∇f(W) W ← W + ηV Or the riemannian manifold equivalent, if applicable.\n\n\n\n\n\n","category":"type"},{"location":"library/#GeometricMachineLearning.NeuralNetworkLayer","page":"Library","title":"GeometricMachineLearning.NeuralNetworkLayer","text":"A NeuralNetworkLayer is a map from mathbbR^N rightarrow mathbbR^M.\n\n\n\n\n\n","category":"type"},{"location":"library/#GeometricMachineLearning.SymplecticHouseholderDecom","page":"Library","title":"GeometricMachineLearning.SymplecticHouseholderDecom","text":"this algorithm is taken (and adjusted) from https://doi.org/10.1016/j.laa.2008.02.029\n\n\n\n\n\n","category":"type"},{"location":"library/#GeometricMachineLearning.chain","page":"Library","title":"GeometricMachineLearning.chain","text":"The function chain returns a chain of a specific neural network architecture and a specific backend and is called by:\n\nchain(::AbstractArchitecture, ::AbstractBackend)\n\n\n\n\n\n","category":"function"},{"location":"Optimizer/#Optimizer","page":"Optimizer","title":"Optimizer","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = GeometricMachineLearning","category":"page"},{"location":"#Geometric-Machine-Learning","page":"Home","title":"Geometric Machine Learning","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeometricMachineLearning.jl implements various scientific machine learning models that aim at learning dynamical systems with geometric structure, such as Hamiltonian (symplectic) or Lagrangian (variational) systems.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GeometricMachineLearning.jl and all of its dependencies can be installed via the Julia REPL by typing ","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add GeometricMachineLearning","category":"page"}]
}
