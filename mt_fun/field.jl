(var"##MTKArg#261", var"##MTKArg#262", var"##MTKArg#263", var"##MTKArg#264", var"##MTKArg#265", var"##MTKArg#266")->begin
        @inbounds begin
                let (y₁, y₂, W1₁ˏ₁, W1₂ˏ₁, W1₃ˏ₁, W1₄ˏ₁, W1₅ˏ₁, W1₁ˏ₂, W1₂ˏ₂, W1₃ˏ₂, W1₄ˏ₂, W1₅ˏ₂, b1₁, b1₂, b1₃, b1₄, b1₅, W2₁ˏ₁, W2₂ˏ₁, W2₃ˏ₁, W2₄ˏ₁, W2₅ˏ₁, W2₁ˏ₂, W2₂ˏ₂, W2₃ˏ₂, W2₄ˏ₂, W2₅ˏ₂, W2₁ˏ₃, W2₂ˏ₃, W2₃ˏ₃, W2₄ˏ₃, W2₅ˏ₃, W2₁ˏ₄, W2₂ˏ₄, W2₃ˏ₄, W2₄ˏ₄, W2₅ˏ₄, W2₁ˏ₅, W2₂ˏ₅, W2₃ˏ₅, W2₄ˏ₅, W2₅ˏ₅, b2₁, b2₂, b2₃, b2₄, b2₅, W3₁ˏ₁, W3₁ˏ₂, W3₁ˏ₃, W3₁ˏ₄, W3₁ˏ₅) = (var"##MTKArg#261"[1], var"##MTKArg#261"[2], var"##MTKArg#262"[1], var"##MTKArg#262"[2], var"##MTKArg#262"[3], var"##MTKArg#262"[4], var"##MTKArg#262"[5], var"##MTKArg#262"[6], var"##MTKArg#262"[7], var"##MTKArg#262"[8], var"##MTKArg#262"[9], var"##MTKArg#262"[10], var"##MTKArg#263"[1], var"##MTKArg#263"[2], var"##MTKArg#263"[3], var"##MTKArg#263"[4], var"##MTKArg#263"[5], var"##MTKArg#264"[1], var"##MTKArg#264"[2], var"##MTKArg#264"[3], var"##MTKArg#264"[4], var"##MTKArg#264"[5], var"##MTKArg#264"[6], var"##MTKArg#264"[7], var"##MTKArg#264"[8], var"##MTKArg#264"[9], var"##MTKArg#264"[10], var"##MTKArg#264"[11], var"##MTKArg#264"[12], var"##MTKArg#264"[13], var"##MTKArg#264"[14], var"##MTKArg#264"[15], var"##MTKArg#264"[16], var"##MTKArg#264"[17], var"##MTKArg#264"[18], var"##MTKArg#264"[19], var"##MTKArg#264"[20], var"##MTKArg#264"[21], var"##MTKArg#264"[22], var"##MTKArg#264"[23], var"##MTKArg#264"[24], var"##MTKArg#264"[25], var"##MTKArg#265"[1], var"##MTKArg#265"[2], var"##MTKArg#265"[3], var"##MTKArg#265"[4], var"##MTKArg#265"[5], var"##MTKArg#266"[1], var"##MTKArg#266"[2], var"##MTKArg#266"[3], var"##MTKArg#266"[4], var"##MTKArg#266"[5])
                    if false || typeof(var"##MTKArg#261") <: Union{ModelingToolkit.StaticArrays.SArray, ModelingToolkit.LabelledArrays.SLArray}
                        var"##MTK#269" = ModelingToolkit.StaticArrays.@SArray([(+)((+)(0, (*)(0, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₅ˏ₅)), W3₁ˏ₅)))), (*)(1, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₅ˏ₅)), W3₁ˏ₅)))), (+)((+)(0, (*)(-1, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₅ˏ₅)), W3₁ˏ₅)))), (*)(0, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₅ˏ₅)), W3₁ˏ₅))))])
                        if true && (!(typeof(var"##MTKArg#261") <: ber) && true)
                            return (similar_type(var"##MTKArg#261", eltype(var"##MTK#269")))(var"##MTK#269")
                        else
                            return var"##MTK#269"
                        end
                    else
                        var"##MTK#269" = [(+)((+)(0, (*)(0, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₅ˏ₅)), W3₁ˏ₅)))), (*)(1, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₅ˏ₅)), W3₁ˏ₅)))), (+)((+)(0, (*)(-1, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₁, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₁, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₁, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₁, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₁, W2₅ˏ₅)), W3₁ˏ₅)))), (*)(0, (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₁, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₁ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₁ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₁ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₁ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₁ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₁ˏ₅)), W3₁ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₂, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₂ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₂ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₂ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₂ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₂ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₂ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₂ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₂ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₂ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₂ˏ₅)), W3₁ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₃, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₃ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₃ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₃ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₃ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₃ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₃ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₃ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₃ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₃ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₃ˏ₅)), W3₁ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₄, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₄ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₄ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₄ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₄ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₄ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₄ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₄ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₄ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₄ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₄ˏ₅)), W3₁ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)((+)((+)((+)(b2₅, (*)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), W2₅ˏ₁)), (*)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), W2₅ˏ₂)), (*)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), W2₅ˏ₃)), (+)((*)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), W2₅ˏ₄), (*)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), W2₅ˏ₅)))), 2))), (+)((+)((+)((+)((*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₁, (*)(W1₁ˏ₁, y₁), (*)(W1₁ˏ₂, y₂))), 2))), W1₁ˏ₂, W2₅ˏ₁), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₂, (*)(W1₂ˏ₁, y₁), (*)(W1₂ˏ₂, y₂))), 2))), W1₂ˏ₂, W2₅ˏ₂)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₃, (*)(W1₃ˏ₁, y₁), (*)(W1₃ˏ₂, y₂))), 2))), W1₃ˏ₂, W2₅ˏ₃)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₄, (*)(W1₄ˏ₁, y₁), (*)(W1₄ˏ₂, y₂))), 2))), W1₄ˏ₂, W2₅ˏ₄)), (*)((+)(1, (*)(-1, (^)((tanh)((+)(b1₅, (*)(W1₅ˏ₁, y₁), (*)(W1₅ˏ₂, y₂))), 2))), W1₅ˏ₂, W2₅ˏ₅)), W3₁ˏ₅))))]
                        if true && true
                            if !(typeof(var"##MTKArg#261") <: Array) && (!(typeof(var"##MTKArg#261") <: ber) && eltype(var"##MTKArg#261") <: eltype(var"##MTK#269"))
                                return convert(typeof(var"##MTKArg#261"), var"##MTK#269")
                            elseif typeof(var"##MTKArg#261") <: ModelingToolkit.LabelledArrays.LArray
                                return ModelingToolkit.LabelledArrays.LArray{ModelingToolkit.LabelledArrays.symnames(typeof(var"##MTKArg#261"))}(var"##MTK#269")
                            else
                                return var"##MTK#269"
                            end
                        else
                            return var"##MTK#269"
                        end
                    end
                end
            end
    end